services:
  # PostgreSQL Database
  db:
    build: ./database
    container_name: clogged_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      APP_DB_USER: ${APP_DB_USER}
      APP_DB_PASSWORD: ${APP_DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Express TypeScript Backend
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: clogged_server
    restart: always
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${APP_DB_USER}
      DB_PASSWORD: ${APP_DB_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      ENDPOINT_SECRET_KEY: ${ENDPOINT_SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./server:/app/server
      - /app/server/node_modules
    command: npm run dev

  data-loader:
    build: ./dumper
    container_name: clogged_data_loader
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${APP_DB_USER}
      DB_PASSWORD: ${APP_DB_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy

  worker:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: clogged_worker
    restart: always
    command: npm run dev:worker
    environment:
      NODE_ENV: development
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: ${APP_DB_USER}
      DB_PASSWORD: ${APP_DB_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  redis:
    image: redis:7.4-alpine
    container_name: clogged_redis
    restart: always
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data


volumes:
  postgres_data:
  redis_data:
  loki_data:
  grafana_data: