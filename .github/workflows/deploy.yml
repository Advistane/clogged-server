name: Deploy Clogged App

on:
  push:
    branches:
      - main     # Trigger on push to main (for production)
      - staging  # Trigger on push to staging

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # Define outputs for the job - These construct the full image names
    outputs:
      db_image: ${{ steps.image_meta.outputs.base_name }}/db:${{ steps.image_meta.outputs.tag }}
      server_image: ${{ steps.image_meta.outputs.base_name }}/server:${{ steps.image_meta.outputs.tag }}
      dataloader_image: ${{ steps.image_meta.outputs.base_name }}/data-loader:${{ steps.image_meta.outputs.tag }}
      worker_image: ${{ steps.image_meta.outputs.base_name }}/worker:${{ steps.image_meta.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Generate Image Tag and Base Name
        id: image_meta
        run: |
          TAG=${{ github.sha }}
          REPO_OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LC=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          BASE_NAME="ghcr.io/${REPO_OWNER_LC}/${REPO_NAME_LC}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "base_name=${BASE_NAME}" >> $GITHUB_OUTPUT
          echo "Generated Tag: ${TAG}"
          echo "Generated Base Name: ${BASE_NAME}"

      # --- Build and Push Each Image ---

      - name: Build and Push Database Image
        id: build_db
        uses: docker/build-push-action@v6
        with:
          context: ./database
          file: ./database/Dockerfile
          push: true
          tags: ${{ steps.image_meta.outputs.base_name }}/db:${{ steps.image_meta.outputs.tag }}
          outputs: type=image,name=${{ steps.image_meta.outputs.base_name }}/db,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Server Image
        id: build_server
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile.prod
          push: true
          tags: ${{ steps.image_meta.outputs.base_name }}/server:${{ steps.image_meta.outputs.tag }}
          outputs: type=image,name=${{ steps.image_meta.outputs.base_name }}/server,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Data Loader Image
        id: build_dataloader
        uses: docker/build-push-action@v6
        with:
          context: ./dumper
          file: ./dumper/Dockerfile
          push: true
          tags: ${{ steps.image_meta.outputs.base_name }}/data-loader:${{ steps.image_meta.outputs.tag }}
          outputs: type=image,name=${{ steps.image_meta.outputs.base_name }}/data-loader,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Worker Image
        id: build_worker
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile.prod
          push: true
          tags: ${{ steps.image_meta.outputs.base_name }}/worker:${{ steps.image_meta.outputs.tag }} # Using distinct tag for worker
          outputs: type=image,name=${{ steps.image_meta.outputs.base_name }}/worker,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to ${{ github.ref_name == 'main' && 'Production' || 'Staging' }}
    runs-on: ubuntu-latest
    needs: build-and-push

    # Select the GitHub Environment based on the branch triggering the workflow
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}

    steps:
      - name: Setup DigitalOcean firewall
        if: github.ref_name == 'staging'
        uses: earthpyy/setup-digitalocean-firewall@v1.0.1
        with:
          access-token: ${{ secrets.DO_ACCESS_TOKEN }}
          firewall-id: ${{ secrets.DO_FIREWALL_ID }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.2.2
        with:
          # These secrets are now automatically sourced from the selected GitHub Environment
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Pass environment-specific info and branch name to the deploy script
          script: |
            export DEPLOY_BRANCH=${{ github.ref_name }}
            export COMPOSE_FILE_NAME=${{ vars.COMPOSE_FILE_NAME }}
            export APP_DEPLOY_PATH=${{ vars.DEPLOY_PATH }}
            export B2_BUCKET_NAME=${{ vars.B2_BUCKET_NAME }}
            export B2_ENDPOINT=${{ vars.B2_ENDPOINT }}
            export B2_REGION=${{ vars.B2_REGION }}
            export POSTGRES_DB=${{ vars.POSTGRES_DB }}
            
            export B2_ACCESS_KEY_ID=${{ secrets.B2_ACCESS_KEY_ID }}
            export B2_SECRET_ACCESS_KEY=${{ secrets.B2_SECRET_ACCESS_KEY }}
            export GF_SECURITY_ADMIN_USER=${{ secrets.GF_SECURITY_ADMIN_USER }}
            export GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
            export GF_SERVER_ROOT_URL=${{ secrets.GF_SERVER_ROOT_URL }}
            export ACME_EMAIL=${{ secrets.ACME_EMAIL }}
            export APP_DB_USER=${{ secrets.APP_DB_USER }}
            export APP_DB_PASSWORD=${{ secrets.APP_DB_PASSWORD }}
            export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export ENDPOINT_SECRET_KEY=${{ secrets.ENDPOINT_SECRET_KEY }}
            
            export DB_IMAGE_NAME="${{ needs.build-and-push.outputs.db_image }}"
            export SERVER_IMAGE_NAME="${{ needs.build-and-push.outputs.server_image }}"
            export DATA_LOADER_IMAGE_NAME="${{ needs.build-and-push.outputs.dataloader_image }}"
            export WORKER_IMAGE_NAME="${{ needs.build-and-push.outputs.worker_image }}"
            
            export GHCR_USER=${{ github.repository_owner }}
            export GHCR_TOKEN=${{ secrets.GHCR_TOKEN }}
            
            echo "Executing deployment script on $host for branch $DEPLOY_BRANCH"
            cd $APP_DEPLOY_PATH
            ./deploy.sh # Execute the deployment script